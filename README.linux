libfreespace-examples Build info
Updated 8/6/2013

General Information
===================

This document describes the build process for libfreespace-examples
on Linux. Some information will be tailored to Ubuntu users, as it is 
the most common Linux distro and has been proven to work with libfreespace.

Required Tools
===================

The tools required to build the examples are the same as the tools required to
build libfreespace. This is because the examples build the libfreespace library
and use the libfreespace source. See the README.win32 for libfreespace and ensure
that libfreespace builds on your machine before proceeding to the examples.

Folder Hierarchy
===================

The build process relies upon a fixed directory structure between
the different projects.  The structure should be:
    <base>/libfreespace
    <base>/libfreespace-examples
where <base> represents your fully-qualified base directory.  For example, you
could use <base> = c:/Hillcrest/. Note that the packaged source releases
contain version numbers in their names. To build under Windows, you need
to remove those numbers. If you are building from the bazaar repository,
you do not need to make any changes.

This folder hierarchy is necessary because the libfreespace-examples build
the libfreespace library and draw upon the libfreespace source.


Getting the files
===================

To correctly check out all of the repositories, change to the <base>
directory, and then run the following checkout.sh script:
    #!/bin/sh
    bzr branch lp:libfreespace libfreespace
    bzr branch lp:libfreespace-examples libfreespace-examples
    # if you want the Java bindings
    bzr branch lp:jfreespace jfreespace

If you find this doesn't work, try:
    bzr branch lp:~libfreespace-devteam/libfreespace/cmake libfreespace
    bzr branch lp:~libfreespace-devteam/libfreespace-examples/cmake libfreespace-examples

Building
========

Launch cmake-gui.

Fill in the "Where is the source code:" entry. This will be the location of the
libfreespace directory. (e.g. ~\Hillcrest\libfreespace-examples)

Fill in the "Where to build the binaries" entry. This can be anywhere but a
reasonable location is ~\Hillcrest\build\libfreespace-examples.

If some configuration data opens up when you enter the build directory, it means
that the directory already had a build in it. You can reset the directory by 
selecting File > Delete Cache.

Click "Configure". You will be prompted to select a generator for this project.
Select the generator "Unix Makefiles" and ensure the "Use default native 
compilers" is selected.

At this point, all the configuration settings will be red. This is the time to 
make any changes to the settings that are displayed. Not all settings are
required, however some important ones are:

The LIBUSB_1_INCLUDE_DIR and LIBUSB_1_LIBRARY variables. These should be
automatically detected by cmake but if they are not you may need to point
them at your libusb installation.

There are other configuration settings available:

CMAKE_INSTALL_PREFIX :
    The installation directory where the CMake install project will install to.
    This is initiated by building the "INSTALL" project in the VS solution.
    Default is typically "C:\Program Files (x86)\libfreespace"
LIBFREESPACE_BACKEND :
    Specify an alternate backend on some paltforms. On Linux, valid values are
    'hidraw' and 'libusb'
LIBFREESPACE_CODECS_ONLY : (ON/OFF)
    Build only the libfreespace codecs
LIBFREESPACE_CUSTOM_INSTALL_RULES :
    CMake file to customize install rules when libfreespace is built as part of
    a larger project
LIBFREESPACE_DOCS_ENABLED : (ON/OFF)
    Enabled doxygen docs as build target
LIBFREESPACE_DOCS_INTERNAL : (ON/OFF)
    Generate doxygen for src files (in addition to API)
LIBFREESPACE_HIDRAW_THREADED_WRITES : (ON/OFF)
    Enable writes in a backend thread when using hidraw
LIBFREESPACE_ADDITIONAL_MESSAGE_FILE :
    Reserved for Hillcrest use. An additional HID message definition file.

Set whatever configuration settings you wish, then click "Configure" until all
red bars are gone. If a red bar persists, it means that setting will need to
be set manually.

Once the red bars are gone click "Generate".

There should now be a Makefile in the build directory.
In order to build the library simply open a terminal window, cd to the build
directory and use the make command.

Example:
    cd ~/Hillcrest/build/libfreespace-examples
    make

The result will a number of executable files corresponding to each of the
libfreespace examples. You can run each one using ./<example_name>. i.e.:
	./communication_example

If you wish to use the "INSTALL" feature of cmake, you can use the install 
target of the Makefile. You may need administrator priveleges in order to do so. 
This will install libfreespace in the directory pointed to by 
CMAKE_INSTALL_PREFIX.

Example:
    cd ~/Hillcrest/build/libfreespace-examples
    sudo make install

Documentation
=============

To make the doxygen documentation, you can simply make the libfreespace-docs
target of the libfreespace-examples Makefile
    1) Open a terminal window and navigate to the build directory.
    2) Enter  "make libfreespace-docs"
    4) From here you can open it using Firefox (or any other browser):
        firefox ./libfreespace/doc/html/index.html

You can also build the documentation from the command line by opening a command
window in your build directory:
    1) Open a terminal window and navigate to the build directory.
    2) Navigate to the "doc" directory by using:
        cd libfreespace/doc
    3) Build the Doxygen documentation by using:
        doxygen Doxyfile
    4) From here you can open it using Firefox (or any other browser):
        firefox ./html/index.html

Linux Kernel Configuration
==========================

libusb requires the Kernel to have USB support enabled.  Specifically:

Support for Host side USB must be enabled in the kernel.
Support for USB device filesystem

At least one USB Host Controller Driver must be enabled.

These options can be found under Device Drivers, USB Support using
make menuconfig


Troubleshooting
===============

Depending on how your system is configured, you may need to tweak
some settings to enable access to the USB port.  The following are
options to try:

1.  If using an old version of Linux, USBFS may need to be mounted

    You can check if USBFS is mounted by issuing:

    cat /proc/bus/usb/devices

    with at least one USB device attached.
    If the file does not exist, issue the following command:

    mount -t usbfs /dev/bus/usb /proc/bus/usb

2.  The permissions on the /dev/bus/usb/[bus]/[device] file may be too
    restrictive.  Try running as root to see if this fixes the problem.
    If it does and you don't want to run as root, update the udev configuration.
    For example, edit or add /etc/udev/rules.d/99-local.rules and add the line:

    SUBSYSTEM=="usb", ATTR{idVendor}=="1d5a", MODE="0666"

3.  If you're running on a system that uses HAL to auto-load drivers, 
    you may want to keep it from loading the HID drivers while debugging
    to avoid mouse movement.  To do this, create a file in /etc/hal/fdi/preprobe
    with the contents:

<?xml version="1.0" encoding="UTF-8"?>

<deviceinfo version="0.2">
 <device>
  <match key="usb_device.vendor_id" int="7514">
    <merge key="info.ignore" type="bool">true</merge>
  </match>
 </device>
</deviceinfo>